
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'comp_unitleftLOGICORleftLOGICANDleftORleftXORleftANDleftEQNEQleftLSSLEQGREGEQleftLSHIFTRSHIFTleftPLUSMINUSleftMULDIVMODrightUMINUSUPLUSLOGICNOTNOTAND ASSIGN ASSIGNTYPE AUTO BOOL BREAK COLON COMMA CONST CONTINUE DIV DOT ELSE EQ F16 F32 F64 FLOATCON FOR FUNC GENERICID GENERICMARK GEQ GRE ID IF INT INTCON LBRACE LBRACK LEQ LOGICAND LOGICNOT LOGICOR LPARENT LSHIFT LSS MAIN MINUS MOD MUL NEQ NOT OR PLUS PRINT RBRACE RBRACK REF RETURN RPARENT RSHIFT SCAN SEMICOLON STRCON STRUCT STRUCTID TEMPLATE TYPEDEF TYPEDEFID VAR VOID WHILE XORcomp_unit : declaration_nestdeclaration_nest : declaration declaration_nest\n                        | emptydeclaration : block_decl\n                   | template_decl\n                   | func_defblock_decl : typedef_decl SEMICOLON\n                  | struct_decl SEMICOLON\n                  | var_decl SEMICOLON\n                  | const_decl SEMICOLON\n                  | func_decl SEMICOLONtypedef_decl : TYPEDEF ID ASSIGN type_specvar_decl : VAR init_decl init_decl_nestconst_decl : CONST init_decl init_decl_nestinit_decl_nest : COMMA init_decl init_decl_nest\n                      | emptyinit_decl : type_spec_opt ID assign_optassign_opt : ASSIGN expression\n                  | emptytype_spec_opt : type_spec COLON\n                     | emptyfunc_decl : FUNC ID func_typetemplate_decl : TEMPLATE generic_type_list declarationgeneric_type_list : LSS generic_type_decl generic_type_nest GREgeneric_type_nest : COMMA generic_type_decl generic_type_nest\n                         | emptygeneric_type_decl : IDfunc_def : func_decl block_stmtmain_func_def : FUNC MAIN LPARENT RPARENT block_stmttype_spec : b_type\n                 | struct_type\n                 | generic_type\n                 | defined_type\n                 | array_type\n                 | refer_type\n                 | func_typeb_type : VOID\n              | BOOL\n              | INT\n              | F16\n              | F32\n              | F64defined_type : TYPEDEFIDgeneric_type : GENERICIDarray_type : type_spec LBRACK int_literal_opt RBRACKint_literal_opt : INT\n                       | emptyrefer_type : AND type_specstruct_type : STRUCTID generic_spec_list_optgeneric_spec_list_opt : LSS type_spec generic_type_spec_nest GRE\n                             | emptygeneric_type_spec_nest : COMMA type_spec generic_type_spec_nest\n                              | emptyfunc_type : LPARENT func_param_list_opt RPARENT ret_type_optret_type_opt : ASSIGN type_spec\n                    | emptyfunc_param_list_opt : func_param func_param_nest\n                           | emptyfunc_param_nest : COMMA func_param func_param_nest\n                       | emptyfunc_param : type_spec_opt IDstruct_decl : STRUCT ID new_struct LBRACE struct_member_nest RBRACEnew_struct :struct_member_nest : struct_member struct_member_nest\n                          | emptystruct_member : member_var_decl\n                     | member_func_def\n                     | cons_func_defmember_var_decl : type_spec COLON ID SEMICOLONmember_func_def : func_defcons_func_def : FUNC struct_type func_type block_stmtstmt : block_stmt\n            | decl_stmt\n            | exp_stmt\n            | if_stmt\n            | while_stmt\n            | for_stmt\n            | break_stmt\n            | continue_stmt\n            | return_stmtblock_stmt : LBRACE stmt_nest RBRACEstmt_nest : stmt stmt_nest\n                 | emptydecl_stmt : var_decl SEMICOLON\n                 | const_decl SEMICOLONexp_stmt : expression_opt SEMICOLONexpression_opt : expression\n                      | emptyif_stmt : IF LPARENT expression RPARENT stmt if_stmt_else_optif_stmt_else_opt : ELSE stmt\n                        | emptywhile_stmt : WHILE LPARENT expression RPARENT stmtfor_stmt : FOR LPARENT for_init_stmt expression_opt SEMICOLON expression_opt RPARENT stmtfor_init_stmt : exp_stmt\n                     | decl_stmtbreak_stmt : BREAK SEMICOLONcontinue_stmt : CONTINUE SEMICOLONreturn_stmt : RETURN expression_opt SEMICOLONexpression : assign_exp\n                  | binary_exp\n                  | unary_exp\n                  | postfix_expassign_exp : expression ASSIGN expressionbinary_exp : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MUL expression\n                   | expression DIV expression\n                   | expression AND expression\n                   | expression OR expression\n                   | expression XOR expression\n                   | expression MOD expression\n                   | expression LSHIFT expression\n                   | expression RSHIFT expression\n                   | expression LOGICOR expression\n                   | expression LOGICAND expression\n                   | expression NEQ expression\n                   | expression EQ expression\n                   | expression LEQ expression\n                   | expression LSS expression\n                   | expression GEQ expression\n                   | expression GRE expressionunary_exp : unary_op expression unary_op : NOT\n                | LOGICNOT\n                | PLUS %prec UPLUS\n                | MINUS %prec UMINUSpostfix_exp : primary_exp\n                   | array_index_exp\n                   | member_exp\n                   | refer_exp\n                   | cast_exp\n                   | call_func_exp\n                   | io_exp\n                   | lambda_expprimary_exp : INTCON\n                   | FLOATCON\n                   | ID\n                   | LPARENT expression RPARENTarray_index_exp : postfix_exp LBRACK expression RBRACKmember_exp : postfix_exp DOT IDrefer_exp : AND LPARENT expression RPARENTcast_exp : LPARENT type_spec RPARENT expressioncall_func_exp : postfix_exp generic_spec_list_opt LPARENT func_real_param_list_opt RPARENTfunc_real_param_list_opt : expression func_real_param_nest\n                                | emptyfunc_real_param_nest : expression func_real_param_nest\n                            | emptylambda_exp : FUNC func_type block_stmtio_exp : SCAN LSS type_spec GRE LPARENT ID RPARENT\n               | PRINT LSS type_spec GRE LPARENT expression RPARENTempty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,19,20,21,22,23,24,25,102,123,],[-151,0,-1,-151,-3,-4,-5,-6,-2,-7,-8,-9,-10,-11,-28,-23,-81,]),'TEMPLATE':([0,3,5,6,7,20,21,22,23,24,25,27,102,123,220,],[13,13,-4,-5,-6,-7,-8,-9,-10,-11,-28,13,-23,-81,-24,]),'TYPEDEF':([0,3,5,6,7,20,21,22,23,24,25,27,102,123,220,],[14,14,-4,-5,-6,-7,-8,-9,-10,-11,-28,14,-23,-81,-24,]),'STRUCT':([0,3,5,6,7,20,21,22,23,24,25,27,102,123,220,],[15,15,-4,-5,-6,-7,-8,-9,-10,-11,-28,15,-23,-81,-24,]),'VAR':([0,3,5,6,7,20,21,22,23,24,25,26,27,56,58,59,60,61,62,63,64,65,66,102,123,125,126,127,153,154,155,212,220,242,246,264,265,279,280,281,289,290,294,],[16,16,-4,-5,-6,-7,-8,-9,-10,-11,-28,16,16,16,-72,-73,-74,-75,-76,-77,-78,-79,-80,-23,-81,-84,-85,-86,16,-96,-97,-98,-24,16,16,-151,-92,-89,16,-91,-90,16,-93,]),'CONST':([0,3,5,6,7,20,21,22,23,24,25,26,27,56,58,59,60,61,62,63,64,65,66,102,123,125,126,127,153,154,155,212,220,242,246,264,265,279,280,281,289,290,294,],[17,17,-4,-5,-6,-7,-8,-9,-10,-11,-28,17,17,17,-72,-73,-74,-75,-76,-77,-78,-79,-80,-23,-81,-84,-85,-86,17,-96,-97,-98,-24,17,17,-151,-92,-89,17,-91,-90,17,-93,]),'FUNC':([0,3,5,6,7,20,21,22,23,24,25,26,27,56,58,59,60,61,62,63,64,65,66,71,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,102,123,125,126,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,170,173,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,220,223,225,226,227,229,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,287,288,289,290,292,293,294,295,],[18,18,-4,-5,-6,-7,-8,-9,-10,-11,-28,101,18,101,-72,-73,-74,-75,-76,-77,-78,-79,-80,101,101,-99,-100,-101,-102,-125,-126,101,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-23,-81,-84,-85,-86,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-96,-97,101,101,-122,230,101,-138,101,101,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,101,-94,-95,-98,-140,101,-148,-24,230,-66,-67,-68,-70,101,-142,101,101,-139,101,-141,-151,-92,101,-143,101,-125,-126,101,101,-89,101,-91,101,-69,-71,-90,101,-149,-150,-93,-138,]),'SEMICOLON':([8,9,10,11,12,26,31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,75,76,77,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,107,109,110,113,115,116,121,122,123,125,126,127,153,154,155,156,157,162,169,171,172,174,179,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,219,232,233,234,238,240,242,243,246,247,248,252,256,260,262,264,265,267,276,279,280,281,289,290,292,293,294,],[20,21,22,23,24,-151,-151,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-151,-44,-43,-151,-151,-88,-72,-73,-74,-75,-76,-77,-78,-79,-80,125,126,127,-87,154,155,-151,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-13,-16,-151,-49,-51,-48,-14,-22,-81,-84,-85,-86,-151,-96,-97,212,-88,-122,-12,-151,-17,-19,-151,-138,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-151,-94,-95,-98,-140,-148,-15,-18,-45,-54,-56,-151,-142,-151,266,-139,-141,-62,-50,-55,-151,-92,-143,287,-89,-151,-91,-90,-151,-149,-150,-93,]),'LBRACE':([12,26,30,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,56,58,59,60,61,62,63,64,65,66,106,113,115,116,122,123,125,126,127,154,155,165,179,212,231,234,238,240,242,246,260,262,264,265,277,279,280,281,289,290,294,],[26,26,-63,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-151,-44,-43,26,-72,-73,-74,-75,-76,-77,-78,-79,-80,170,-49,-51,-48,-22,-81,-84,-85,-86,-96,-97,26,-151,-98,26,-45,-54,-56,26,26,-50,-55,-151,-92,26,-89,26,-91,-90,26,-93,]),'LSS':([13,48,72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,99,100,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[28,114,149,-99,-100,-101,114,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,163,164,-81,149,149,149,-138,149,-104,-105,-106,-107,149,149,149,-111,-112,-113,149,149,149,149,-118,-119,-120,-121,149,149,-140,149,-148,149,149,-139,149,-141,-143,149,149,149,-149,-150,-138,]),'ID':([14,15,16,17,18,26,28,32,34,52,56,58,59,60,61,62,63,64,65,66,71,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,108,111,119,120,123,125,126,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,159,161,162,167,173,181,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,230,242,243,245,246,248,250,252,258,264,265,266,267,268,270,271,272,274,275,279,280,281,284,289,290,292,293,294,295,],[29,30,-151,-151,54,98,104,110,-21,-151,98,-72,-73,-74,-75,-76,-77,-78,-79,-80,98,98,-99,-100,-101,-102,-125,-126,98,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-151,-20,-21,183,-81,-84,-85,-86,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-96,-97,98,214,98,-122,104,98,-151,-138,98,98,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,98,-94,-95,-98,-140,98,-148,54,98,-142,98,98,-139,98,-141,276,-151,-92,98,-143,98,-125,-126,98,285,98,-89,98,-91,98,-90,98,-149,-150,-93,-138,]),'VOID':([16,17,25,51,52,71,105,108,114,123,129,132,163,164,170,181,188,223,225,226,227,229,236,239,244,245,284,287,288,],[42,42,-28,42,42,42,42,42,42,-81,42,42,42,42,42,42,42,42,-66,-67,-68,-70,42,42,42,42,42,-69,-71,]),'BOOL':([16,17,25,51,52,71,105,108,114,123,129,132,163,164,170,181,188,223,225,226,227,229,236,239,244,245,284,287,288,],[43,43,-28,43,43,43,43,43,43,-81,43,43,43,43,43,43,43,43,-66,-67,-68,-70,43,43,43,43,43,-69,-71,]),'INT':([16,17,25,51,52,71,105,108,112,114,123,129,132,163,164,170,181,188,223,225,226,227,229,236,239,244,245,284,287,288,],[44,44,-28,44,44,44,44,44,176,44,-81,44,44,44,44,44,44,44,44,-66,-67,-68,-70,44,44,44,44,44,-69,-71,]),'F16':([16,17,25,51,52,71,105,108,114,123,129,132,163,164,170,181,188,223,225,226,227,229,236,239,244,245,284,287,288,],[45,45,-28,45,45,45,45,45,45,-81,45,45,45,45,45,45,45,45,-66,-67,-68,-70,45,45,45,45,45,-69,-71,]),'F32':([16,17,25,51,52,71,105,108,114,123,129,132,163,164,170,181,188,223,225,226,227,229,236,239,244,245,284,287,288,],[46,46,-28,46,46,46,46,46,46,-81,46,46,46,46,46,46,46,46,-66,-67,-68,-70,46,46,46,46,46,-69,-71,]),'F64':([16,17,25,51,52,71,105,108,114,123,129,132,163,164,170,181,188,223,225,226,227,229,236,239,244,245,284,287,288,],[47,47,-28,47,47,47,47,47,47,-81,47,47,47,47,47,47,47,47,-66,-67,-68,-70,47,47,47,47,47,-69,-71,]),'STRUCTID':([16,17,25,51,52,71,105,108,114,123,129,132,163,164,170,181,188,223,225,226,227,229,230,236,239,244,245,284,287,288,],[48,48,-28,48,48,48,48,48,48,-81,48,48,48,48,48,48,48,48,-66,-67,-68,-70,48,48,48,48,48,48,-69,-71,]),'GENERICID':([16,17,25,51,52,71,105,108,114,123,129,132,163,164,170,181,188,223,225,226,227,229,236,239,244,245,284,287,288,],[49,49,-28,49,49,49,49,49,49,-81,49,49,49,49,49,49,49,49,-66,-67,-68,-70,49,49,49,49,49,-69,-71,]),'TYPEDEFID':([16,17,25,51,52,71,105,108,114,123,129,132,163,164,170,181,188,223,225,226,227,229,236,239,244,245,284,287,288,],[50,50,-28,50,50,50,50,50,50,-81,50,50,50,50,50,50,50,50,-66,-67,-68,-70,50,50,50,50,50,-69,-71,]),'AND':([16,17,25,26,51,52,56,58,59,60,61,62,63,64,65,66,71,72,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,105,108,114,123,125,126,127,128,129,130,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,163,164,170,173,181,184,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,223,225,226,227,229,233,236,239,242,243,244,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,286,287,288,289,290,291,292,293,294,295,],[51,51,-28,84,51,51,84,-72,-73,-74,-75,-76,-77,-78,-79,-80,132,138,84,-99,-100,-101,-102,-125,-126,84,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,51,51,51,-81,-84,-85,-86,84,132,138,51,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-96,-97,84,84,138,51,51,51,84,51,138,-138,84,244,138,-104,-105,-106,-107,-108,138,138,-111,-112,-113,138,138,-116,-117,-118,-119,-120,-121,138,84,-94,-95,-98,138,-140,84,138,-148,51,-66,-67,-68,-70,138,51,51,84,138,51,132,84,-139,272,-141,-151,-92,84,-143,272,-125,-126,84,84,-89,84,-91,132,138,-69,-71,-90,84,138,-149,-150,-93,-138,]),'LPARENT':([16,17,25,26,48,51,52,54,56,58,59,60,61,62,63,64,65,66,70,71,73,74,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,101,105,108,113,114,115,123,125,126,127,128,129,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,160,161,162,163,164,170,173,181,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,223,225,226,227,229,236,239,242,243,244,245,246,248,250,252,253,254,259,260,264,265,266,267,268,270,271,272,275,279,280,281,284,287,288,289,290,292,293,294,295,],[52,52,-28,71,-151,52,52,52,71,-72,-73,-74,-75,-76,-77,-78,-79,-80,128,129,152,153,71,-99,-100,-101,-102,-125,-126,161,71,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,52,52,52,-49,52,-51,-81,-84,-85,-86,71,129,188,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-96,-97,71,215,71,-122,52,52,52,71,52,-138,71,245,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,71,-94,-95,-98,-140,71,-148,52,-66,-67,-68,-70,52,52,71,-142,188,129,71,-139,71,-141,274,275,52,-50,-151,-92,71,-143,71,-125,-126,284,71,-89,71,-91,129,-69,-71,-90,71,-149,-150,-93,-138,]),'RBRACE':([25,26,55,56,57,58,59,60,61,62,63,64,65,66,123,124,125,126,127,154,155,170,212,222,223,224,225,226,227,229,257,264,265,279,281,287,288,289,294,],[-28,-151,123,-151,-83,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-84,-85,-86,-96,-97,-151,-98,256,-151,-65,-66,-67,-68,-70,-64,-151,-92,-89,-91,-69,-71,-90,-93,]),'IF':([26,56,58,59,60,61,62,63,64,65,66,123,125,126,127,154,155,212,242,246,264,265,279,280,281,289,290,294,],[70,70,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-84,-85,-86,-96,-97,-98,70,70,-151,-92,-89,70,-91,-90,70,-93,]),'WHILE':([26,56,58,59,60,61,62,63,64,65,66,123,125,126,127,154,155,212,242,246,264,265,279,280,281,289,290,294,],[73,73,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-84,-85,-86,-96,-97,-98,73,73,-151,-92,-89,73,-91,-90,73,-93,]),'FOR':([26,56,58,59,60,61,62,63,64,65,66,123,125,126,127,154,155,212,242,246,264,265,279,280,281,289,290,294,],[74,74,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-84,-85,-86,-96,-97,-98,74,74,-151,-92,-89,74,-91,-90,74,-93,]),'BREAK':([26,56,58,59,60,61,62,63,64,65,66,123,125,126,127,154,155,212,242,246,264,265,279,280,281,289,290,294,],[75,75,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-84,-85,-86,-96,-97,-98,75,75,-151,-92,-89,75,-91,-90,75,-93,]),'CONTINUE':([26,56,58,59,60,61,62,63,64,65,66,123,125,126,127,154,155,212,242,246,264,265,279,280,281,289,290,294,],[76,76,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-84,-85,-86,-96,-97,-98,76,76,-151,-92,-89,76,-91,-90,76,-93,]),'RETURN':([26,56,58,59,60,61,62,63,64,65,66,123,125,126,127,154,155,212,242,246,264,265,279,280,281,289,290,294,],[77,77,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-84,-85,-86,-96,-97,-98,77,77,-151,-92,-89,77,-91,-90,77,-93,]),'NOT':([26,56,58,59,60,61,62,63,64,65,66,71,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,123,125,126,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,173,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,289,290,292,293,294,295,],[94,94,-72,-73,-74,-75,-76,-77,-78,-79,-80,94,94,-99,-100,-101,-102,-125,-126,94,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-81,-84,-85,-86,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-96,-97,94,94,-122,94,-138,94,94,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,94,-94,-95,-98,-140,94,-148,94,-142,94,94,-139,94,-141,-151,-92,94,-143,94,94,94,94,94,-89,94,-91,94,-90,94,-149,-150,-93,-138,]),'LOGICNOT':([26,56,58,59,60,61,62,63,64,65,66,71,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,123,125,126,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,173,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,289,290,292,293,294,295,],[95,95,-72,-73,-74,-75,-76,-77,-78,-79,-80,95,95,-99,-100,-101,-102,-125,-126,95,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-81,-84,-85,-86,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-96,-97,95,95,-122,95,-138,95,95,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,95,-94,-95,-98,-140,95,-148,95,-142,95,95,-139,95,-141,-151,-92,95,-143,95,95,95,95,95,-89,95,-91,95,-90,95,-149,-150,-93,-138,]),'PLUS':([26,56,58,59,60,61,62,63,64,65,66,71,72,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,123,125,126,127,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,173,184,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,233,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,286,289,290,291,292,293,294,295,],[82,82,-72,-73,-74,-75,-76,-77,-78,-79,-80,82,134,82,-99,-100,-101,-102,-125,-126,82,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-81,-84,-85,-86,82,82,134,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-96,-97,82,82,134,82,134,-138,82,82,134,-104,-105,-106,-107,134,134,134,-111,134,134,134,134,134,134,134,134,134,134,134,82,-94,-95,-98,134,-140,82,134,-148,134,82,134,82,82,-139,270,-141,-151,-92,82,-143,270,-125,-126,82,82,-89,82,-91,82,134,-90,82,134,-149,-150,-93,-138,]),'MINUS':([26,56,58,59,60,61,62,63,64,65,66,71,72,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,123,125,126,127,128,129,130,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,173,184,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,219,233,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,286,289,290,291,292,293,294,295,],[83,83,-72,-73,-74,-75,-76,-77,-78,-79,-80,83,135,83,-99,-100,-101,-102,-125,-126,83,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-81,-84,-85,-86,83,83,135,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-96,-97,83,83,135,83,135,-138,83,83,135,-104,-105,-106,-107,135,135,135,-111,135,135,135,135,135,135,135,135,135,135,135,83,-94,-95,-98,135,-140,83,135,-148,135,83,135,83,83,-139,271,-141,-151,-92,83,-143,271,-125,-126,83,83,-89,83,-91,83,135,-90,83,135,-149,-150,-93,-138,]),'INTCON':([26,56,58,59,60,61,62,63,64,65,66,71,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,123,125,126,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,173,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,289,290,292,293,294,295,],[96,96,-72,-73,-74,-75,-76,-77,-78,-79,-80,96,96,-99,-100,-101,-102,-125,-126,96,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-81,-84,-85,-86,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-96,-97,96,96,-122,96,-138,96,96,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,96,-94,-95,-98,-140,96,-148,96,-142,96,96,-139,96,-141,-151,-92,96,-143,96,-125,-126,96,96,-89,96,-91,96,-90,96,-149,-150,-93,-138,]),'FLOATCON':([26,56,58,59,60,61,62,63,64,65,66,71,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,123,125,126,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,173,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,289,290,292,293,294,295,],[97,97,-72,-73,-74,-75,-76,-77,-78,-79,-80,97,97,-99,-100,-101,-102,-125,-126,97,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-81,-84,-85,-86,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-96,-97,97,97,-122,97,-138,97,97,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,97,-94,-95,-98,-140,97,-148,97,-142,97,97,-139,97,-141,-151,-92,97,-143,97,-125,-126,97,97,-89,97,-91,97,-90,97,-149,-150,-93,-138,]),'SCAN':([26,56,58,59,60,61,62,63,64,65,66,71,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,123,125,126,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,173,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,289,290,292,293,294,295,],[99,99,-72,-73,-74,-75,-76,-77,-78,-79,-80,99,99,-99,-100,-101,-102,-125,-126,99,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-81,-84,-85,-86,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-96,-97,99,99,-122,99,-138,99,99,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,99,-94,-95,-98,-140,99,-148,99,-142,99,99,-139,99,-141,-151,-92,99,-143,99,-125,-126,99,99,-89,99,-91,99,-90,99,-149,-150,-93,-138,]),'PRINT':([26,56,58,59,60,61,62,63,64,65,66,71,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,123,125,126,127,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,158,161,162,173,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,214,215,219,242,243,245,246,248,250,252,264,265,266,267,268,270,271,272,275,279,280,281,284,289,290,292,293,294,295,],[100,100,-72,-73,-74,-75,-76,-77,-78,-79,-80,100,100,-99,-100,-101,-102,-125,-126,100,-127,-128,-129,-130,-131,-132,-133,-134,-123,-124,-135,-136,-137,-81,-84,-85,-86,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-96,-97,100,100,-122,100,-138,100,100,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,100,-94,-95,-98,-140,100,-148,100,-142,100,100,-139,100,-141,-151,-92,100,-143,100,-125,-126,100,100,-89,100,-91,100,-90,100,-149,-150,-93,-138,]),'ASSIGN':([29,72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,110,123,130,162,179,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[105,133,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,173,-81,133,133,239,133,-138,133,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,133,133,-140,133,-148,133,133,-139,133,-141,-143,133,133,133,-149,-150,-138,]),'COMMA':([31,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,53,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,103,104,110,113,115,116,118,123,162,171,172,174,178,179,183,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,214,219,221,233,234,238,240,241,243,248,252,260,261,262,267,292,293,],[108,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-151,-44,-43,108,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,167,-27,-151,-49,-51,-48,181,-81,-122,108,-17,-19,236,-151,-61,-138,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-140,-148,167,-18,-45,-54,-56,181,-142,-139,-141,-50,236,-55,-143,-149,-150,]),'COLON':([33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,113,115,116,179,185,228,234,238,240,260,262,],[111,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-151,-44,-43,-49,-51,-48,-151,111,258,-45,-54,-56,-50,-55,]),'LBRACK':([33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,113,115,116,123,131,162,169,178,179,185,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,214,217,218,219,228,234,238,240,243,248,252,260,261,262,267,292,293,295,],[112,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-151,-44,-43,-99,-100,-101,158,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-49,-51,-48,-81,112,-122,112,112,-151,112,-138,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-140,112,112,-148,112,-45,-54,-56,-142,-139,-141,-50,112,112,-143,-149,-150,-138,]),'GRE':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,103,104,113,115,116,123,130,162,166,168,178,179,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,217,218,219,221,233,234,235,237,238,240,243,248,250,252,255,260,261,262,267,268,278,286,291,292,293,295,],[-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-151,-44,-43,151,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-151,-27,-49,-51,-48,-81,151,151,220,-26,-151,-151,151,-138,151,-104,-105,-106,-107,151,151,151,-111,-112,-113,151,151,151,151,-118,-119,-120,-121,151,151,-140,151,253,254,-148,-151,151,-45,260,-53,-54,-56,151,-139,151,-141,-25,-50,-151,-55,-143,151,-52,151,151,-149,-150,-138,]),'RPARENT':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,113,115,116,117,118,119,123,129,130,131,157,162,179,180,182,183,184,185,186,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,214,215,216,219,234,238,240,241,243,245,248,249,250,251,252,260,262,263,266,267,268,269,273,282,283,285,286,291,292,293,295,],[-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-151,-44,-43,-151,-87,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-49,-51,-48,179,-151,-58,-81,-151,186,187,-88,-122,-151,-57,-60,-61,242,187,-138,-151,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,246,-140,-151,252,-148,-45,-54,-56,-151,-142,-151,-139,267,-151,-145,-141,-50,-55,-59,-151,-143,-151,-144,-147,290,-146,292,293,295,-149,-150,-138,]),'ELSE':([58,59,60,61,62,63,64,65,66,123,125,126,127,154,155,212,264,265,279,281,289,294,],[-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-84,-85,-86,-96,-97,-98,280,-92,-89,-91,-90,-93,]),'MUL':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[136,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,136,136,136,-138,136,136,136,-106,-107,136,136,136,-111,136,136,136,136,136,136,136,136,136,136,136,136,-140,136,-148,136,136,-139,136,-141,-143,136,136,136,-149,-150,-138,]),'DIV':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[137,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,137,137,137,-138,137,137,137,-106,-107,137,137,137,-111,137,137,137,137,137,137,137,137,137,137,137,137,-140,137,-148,137,137,-139,137,-141,-143,137,137,137,-149,-150,-138,]),'OR':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[139,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,139,139,139,-138,139,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,139,139,-116,-117,-118,-119,-120,-121,139,139,-140,139,-148,139,139,-139,139,-141,-143,139,139,139,-149,-150,-138,]),'XOR':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[140,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,140,140,140,-138,140,-104,-105,-106,-107,-108,140,-110,-111,-112,-113,140,140,-116,-117,-118,-119,-120,-121,140,140,-140,140,-148,140,140,-139,140,-141,-143,140,140,140,-149,-150,-138,]),'MOD':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[141,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,141,141,141,-138,141,141,141,-106,-107,141,141,141,-111,141,141,141,141,141,141,141,141,141,141,141,141,-140,141,-148,141,141,-139,141,-141,-143,141,141,141,-149,-150,-138,]),'LSHIFT':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[142,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,142,142,142,-138,142,-104,-105,-106,-107,142,142,142,-111,-112,-113,142,142,142,142,142,142,142,142,142,142,-140,142,-148,142,142,-139,142,-141,-143,142,142,142,-149,-150,-138,]),'RSHIFT':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[143,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,143,143,143,-138,143,-104,-105,-106,-107,143,143,143,-111,-112,-113,143,143,143,143,143,143,143,143,143,143,-140,143,-148,143,143,-139,143,-141,-143,143,143,143,-149,-150,-138,]),'LOGICOR':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[144,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,144,144,144,-138,144,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,144,144,-140,144,-148,144,144,-139,144,-141,-143,144,144,144,-149,-150,-138,]),'LOGICAND':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[145,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,145,145,145,-138,145,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,145,-115,-116,-117,-118,-119,-120,-121,145,145,-140,145,-148,145,145,-139,145,-141,-143,145,145,145,-149,-150,-138,]),'NEQ':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[146,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,146,146,146,-138,146,-104,-105,-106,-107,146,146,146,-111,-112,-113,146,146,-116,-117,-118,-119,-120,-121,146,146,-140,146,-148,146,146,-139,146,-141,-143,146,146,146,-149,-150,-138,]),'EQ':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[147,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,147,147,147,-138,147,-104,-105,-106,-107,147,147,147,-111,-112,-113,147,147,-116,-117,-118,-119,-120,-121,147,147,-140,147,-148,147,147,-139,147,-141,-143,147,147,147,-149,-150,-138,]),'LEQ':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[148,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,148,148,148,-138,148,-104,-105,-106,-107,148,148,148,-111,-112,-113,148,148,148,148,-118,-119,-120,-121,148,148,-140,148,-148,148,148,-139,148,-141,-143,148,148,148,-149,-150,-138,]),'GEQ':([72,78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,130,162,184,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,213,214,216,219,233,243,248,250,252,267,268,286,291,292,293,295,],[150,-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,150,150,150,-138,150,-104,-105,-106,-107,150,150,150,-111,-112,-113,150,150,150,150,-118,-119,-120,-121,150,150,-140,150,-148,150,150,-139,150,-141,-143,150,150,150,-149,-150,-138,]),'RBRACK':([78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,112,123,162,175,176,177,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,213,214,219,243,248,252,267,292,293,],[-99,-100,-101,-102,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-151,-81,-122,234,-46,-47,-138,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,248,-140,-148,-142,-139,-141,-143,-149,-150,]),'DOT':([78,79,80,81,86,87,88,89,90,91,92,93,96,97,98,123,162,186,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,214,219,243,248,252,267,292,293,295,],[-99,-100,-101,159,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-81,-122,-138,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-140,-148,-142,-139,-141,-143,-149,-150,-138,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'comp_unit':([0,],[1,]),'declaration_nest':([0,3,],[2,19,]),'declaration':([0,3,27,],[3,3,102,]),'empty':([0,3,16,17,26,31,48,52,53,56,77,81,103,108,110,112,118,129,153,170,171,178,179,181,188,209,215,221,223,241,242,245,246,250,261,264,266,268,280,290,],[4,4,34,34,57,109,115,119,109,57,157,115,168,34,174,177,182,119,157,224,109,237,240,34,119,157,251,168,224,182,157,119,157,273,237,281,157,273,157,157,]),'block_decl':([0,3,27,],[5,5,5,]),'template_decl':([0,3,27,],[6,6,6,]),'func_def':([0,3,27,170,223,],[7,7,7,229,229,]),'typedef_decl':([0,3,27,],[8,8,8,]),'struct_decl':([0,3,27,],[9,9,9,]),'var_decl':([0,3,26,27,56,153,242,246,280,290,],[10,10,67,10,67,67,67,67,67,67,]),'const_decl':([0,3,26,27,56,153,242,246,280,290,],[11,11,68,11,68,68,68,68,68,68,]),'func_decl':([0,3,27,170,223,],[12,12,12,231,231,]),'block_stmt':([12,26,56,165,231,242,246,277,280,290,],[25,58,58,219,25,58,58,288,58,58,]),'generic_type_list':([13,],[27,]),'init_decl':([16,17,108,],[31,53,171,]),'type_spec_opt':([16,17,52,108,129,181,188,245,],[32,32,120,32,120,120,120,120,]),'type_spec':([16,17,51,52,71,105,108,114,129,132,163,164,170,181,188,223,236,239,244,245,284,],[33,33,116,33,131,169,33,178,185,116,217,218,228,33,33,228,261,262,116,185,131,]),'b_type':([16,17,51,52,71,105,108,114,129,132,163,164,170,181,188,223,236,239,244,245,284,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'struct_type':([16,17,51,52,71,105,108,114,129,132,163,164,170,181,188,223,230,236,239,244,245,284,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,259,36,36,36,36,36,]),'generic_type':([16,17,51,52,71,105,108,114,129,132,163,164,170,181,188,223,236,239,244,245,284,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'defined_type':([16,17,51,52,71,105,108,114,129,132,163,164,170,181,188,223,236,239,244,245,284,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'array_type':([16,17,51,52,71,105,108,114,129,132,163,164,170,181,188,223,236,239,244,245,284,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'refer_type':([16,17,51,52,71,105,108,114,129,132,163,164,170,181,188,223,236,239,244,245,284,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'func_type':([16,17,51,52,54,71,101,105,108,114,129,132,163,164,170,181,188,223,236,239,244,245,259,284,],[41,41,41,41,122,41,165,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,277,41,]),'stmt_nest':([26,56,],[55,124,]),'stmt':([26,56,242,246,280,290,],[56,56,264,265,289,294,]),'decl_stmt':([26,56,153,242,246,280,290,],[59,59,211,59,59,59,59,]),'exp_stmt':([26,56,153,242,246,280,290,],[60,60,210,60,60,60,60,]),'if_stmt':([26,56,242,246,280,290,],[61,61,61,61,61,61,]),'while_stmt':([26,56,242,246,280,290,],[62,62,62,62,62,62,]),'for_stmt':([26,56,242,246,280,290,],[63,63,63,63,63,63,]),'break_stmt':([26,56,242,246,280,290,],[64,64,64,64,64,64,]),'continue_stmt':([26,56,242,246,280,290,],[65,65,65,65,65,65,]),'return_stmt':([26,56,242,246,280,290,],[66,66,66,66,66,66,]),'expression_opt':([26,56,77,153,209,242,246,266,280,290,],[69,69,156,69,247,69,69,282,69,69,]),'expression':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[72,72,130,72,162,184,130,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,72,213,216,233,243,216,72,250,72,130,72,268,72,268,190,191,194,286,72,291,72,]),'assign_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'binary_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'unary_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'postfix_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'unary_op':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'primary_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'array_index_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'member_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'refer_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'cast_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'call_func_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'io_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'lambda_exp':([26,56,71,77,85,128,129,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,158,161,173,187,188,209,215,242,245,246,250,266,268,270,271,272,275,280,284,290,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'generic_type_decl':([28,167,],[103,221,]),'new_struct':([30,],[106,]),'init_decl_nest':([31,53,171,],[107,121,232,]),'generic_spec_list_opt':([48,81,],[113,160,]),'func_param_list_opt':([52,129,188,245,],[117,117,117,117,]),'func_param':([52,129,181,188,245,],[118,118,241,118,118,]),'generic_type_nest':([103,221,],[166,255,]),'assign_opt':([110,],[172,]),'int_literal_opt':([112,],[175,]),'func_param_nest':([118,241,],[180,263,]),'for_init_stmt':([153,],[209,]),'struct_member_nest':([170,223,],[222,257,]),'struct_member':([170,223,],[223,223,]),'member_var_decl':([170,223,],[225,225,]),'member_func_def':([170,223,],[226,226,]),'cons_func_def':([170,223,],[227,227,]),'generic_type_spec_nest':([178,261,],[235,278,]),'ret_type_opt':([179,],[238,]),'func_real_param_list_opt':([215,],[249,]),'func_real_param_nest':([250,268,],[269,283,]),'if_stmt_else_opt':([264,],[279,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> comp_unit","S'",1,None,None,None),
  ('comp_unit -> declaration_nest','comp_unit',1,'p_comp_unit','parser.py',10),
  ('declaration_nest -> declaration declaration_nest','declaration_nest',2,'p_declaration_nest','parser.py',17),
  ('declaration_nest -> empty','declaration_nest',1,'p_declaration_nest','parser.py',18),
  ('declaration -> block_decl','declaration',1,'p_declaration','parser.py',26),
  ('declaration -> template_decl','declaration',1,'p_declaration','parser.py',27),
  ('declaration -> func_def','declaration',1,'p_declaration','parser.py',28),
  ('block_decl -> typedef_decl SEMICOLON','block_decl',2,'p_block_decl','parser.py',33),
  ('block_decl -> struct_decl SEMICOLON','block_decl',2,'p_block_decl','parser.py',34),
  ('block_decl -> var_decl SEMICOLON','block_decl',2,'p_block_decl','parser.py',35),
  ('block_decl -> const_decl SEMICOLON','block_decl',2,'p_block_decl','parser.py',36),
  ('block_decl -> func_decl SEMICOLON','block_decl',2,'p_block_decl','parser.py',37),
  ('typedef_decl -> TYPEDEF ID ASSIGN type_spec','typedef_decl',4,'p_typedef_decl','parser.py',42),
  ('var_decl -> VAR init_decl init_decl_nest','var_decl',3,'p_var_decl','parser.py',48),
  ('const_decl -> CONST init_decl init_decl_nest','const_decl',3,'p_const_decl','parser.py',53),
  ('init_decl_nest -> COMMA init_decl init_decl_nest','init_decl_nest',3,'p_init_decl_nest','parser.py',58),
  ('init_decl_nest -> empty','init_decl_nest',1,'p_init_decl_nest','parser.py',59),
  ('init_decl -> type_spec_opt ID assign_opt','init_decl',3,'p_init_decl','parser.py',67),
  ('assign_opt -> ASSIGN expression','assign_opt',2,'p_assign_opt','parser.py',72),
  ('assign_opt -> empty','assign_opt',1,'p_assign_opt','parser.py',73),
  ('type_spec_opt -> type_spec COLON','type_spec_opt',2,'p_type_spec_opt','parser.py',81),
  ('type_spec_opt -> empty','type_spec_opt',1,'p_type_spec_opt','parser.py',82),
  ('func_decl -> FUNC ID func_type','func_decl',3,'p_func_decl','parser.py',90),
  ('template_decl -> TEMPLATE generic_type_list declaration','template_decl',3,'p_template_decl','parser.py',95),
  ('generic_type_list -> LSS generic_type_decl generic_type_nest GRE','generic_type_list',4,'p_generic_type_list','parser.py',101),
  ('generic_type_nest -> COMMA generic_type_decl generic_type_nest','generic_type_nest',3,'p_generic_type_nest','parser.py',106),
  ('generic_type_nest -> empty','generic_type_nest',1,'p_generic_type_nest','parser.py',107),
  ('generic_type_decl -> ID','generic_type_decl',1,'p_generic_type_decl','parser.py',115),
  ('func_def -> func_decl block_stmt','func_def',2,'p_func_def','parser.py',121),
  ('main_func_def -> FUNC MAIN LPARENT RPARENT block_stmt','main_func_def',5,'p_main_func_def','parser.py',126),
  ('type_spec -> b_type','type_spec',1,'p_type_spec','parser.py',131),
  ('type_spec -> struct_type','type_spec',1,'p_type_spec','parser.py',132),
  ('type_spec -> generic_type','type_spec',1,'p_type_spec','parser.py',133),
  ('type_spec -> defined_type','type_spec',1,'p_type_spec','parser.py',134),
  ('type_spec -> array_type','type_spec',1,'p_type_spec','parser.py',135),
  ('type_spec -> refer_type','type_spec',1,'p_type_spec','parser.py',136),
  ('type_spec -> func_type','type_spec',1,'p_type_spec','parser.py',137),
  ('b_type -> VOID','b_type',1,'p_b_type','parser.py',142),
  ('b_type -> BOOL','b_type',1,'p_b_type','parser.py',143),
  ('b_type -> INT','b_type',1,'p_b_type','parser.py',144),
  ('b_type -> F16','b_type',1,'p_b_type','parser.py',145),
  ('b_type -> F32','b_type',1,'p_b_type','parser.py',146),
  ('b_type -> F64','b_type',1,'p_b_type','parser.py',147),
  ('defined_type -> TYPEDEFID','defined_type',1,'p_defined_type','parser.py',152),
  ('generic_type -> GENERICID','generic_type',1,'p_generic_type','parser.py',157),
  ('array_type -> type_spec LBRACK int_literal_opt RBRACK','array_type',4,'p_array_type','parser.py',162),
  ('int_literal_opt -> INT','int_literal_opt',1,'p_int_literal_opt','parser.py',167),
  ('int_literal_opt -> empty','int_literal_opt',1,'p_int_literal_opt','parser.py',168),
  ('refer_type -> AND type_spec','refer_type',2,'p_refer_type','parser.py',176),
  ('struct_type -> STRUCTID generic_spec_list_opt','struct_type',2,'p_struct_type','parser.py',181),
  ('generic_spec_list_opt -> LSS type_spec generic_type_spec_nest GRE','generic_spec_list_opt',4,'p_generic_spec_list_opt','parser.py',186),
  ('generic_spec_list_opt -> empty','generic_spec_list_opt',1,'p_generic_spec_list_opt','parser.py',187),
  ('generic_type_spec_nest -> COMMA type_spec generic_type_spec_nest','generic_type_spec_nest',3,'p_generic_type_spec_nest','parser.py',195),
  ('generic_type_spec_nest -> empty','generic_type_spec_nest',1,'p_generic_type_spec_nest','parser.py',196),
  ('func_type -> LPARENT func_param_list_opt RPARENT ret_type_opt','func_type',4,'p_func_type','parser.py',204),
  ('ret_type_opt -> ASSIGN type_spec','ret_type_opt',2,'p_ret_type_opt','parser.py',209),
  ('ret_type_opt -> empty','ret_type_opt',1,'p_ret_type_opt','parser.py',210),
  ('func_param_list_opt -> func_param func_param_nest','func_param_list_opt',2,'p_func_param_list_opt','parser.py',218),
  ('func_param_list_opt -> empty','func_param_list_opt',1,'p_func_param_list_opt','parser.py',219),
  ('func_param_nest -> COMMA func_param func_param_nest','func_param_nest',3,'p_func_param_nest','parser.py',227),
  ('func_param_nest -> empty','func_param_nest',1,'p_func_param_nest','parser.py',228),
  ('func_param -> type_spec_opt ID','func_param',2,'p_func_param','parser.py',236),
  ('struct_decl -> STRUCT ID new_struct LBRACE struct_member_nest RBRACE','struct_decl',6,'p_struct_decl','parser.py',242),
  ('new_struct -> <empty>','new_struct',0,'p_new_struct','parser.py',247),
  ('struct_member_nest -> struct_member struct_member_nest','struct_member_nest',2,'p_struct_member_nest','parser.py',252),
  ('struct_member_nest -> empty','struct_member_nest',1,'p_struct_member_nest','parser.py',253),
  ('struct_member -> member_var_decl','struct_member',1,'p_struct_member','parser.py',261),
  ('struct_member -> member_func_def','struct_member',1,'p_struct_member','parser.py',262),
  ('struct_member -> cons_func_def','struct_member',1,'p_struct_member','parser.py',263),
  ('member_var_decl -> type_spec COLON ID SEMICOLON','member_var_decl',4,'p_member_var_decl','parser.py',268),
  ('member_func_def -> func_def','member_func_def',1,'p_member_func_def','parser.py',273),
  ('cons_func_def -> FUNC struct_type func_type block_stmt','cons_func_def',4,'p_cons_func_def','parser.py',278),
  ('stmt -> block_stmt','stmt',1,'p_stmt','parser.py',283),
  ('stmt -> decl_stmt','stmt',1,'p_stmt','parser.py',284),
  ('stmt -> exp_stmt','stmt',1,'p_stmt','parser.py',285),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',286),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',287),
  ('stmt -> for_stmt','stmt',1,'p_stmt','parser.py',288),
  ('stmt -> break_stmt','stmt',1,'p_stmt','parser.py',289),
  ('stmt -> continue_stmt','stmt',1,'p_stmt','parser.py',290),
  ('stmt -> return_stmt','stmt',1,'p_stmt','parser.py',291),
  ('block_stmt -> LBRACE stmt_nest RBRACE','block_stmt',3,'p_block_stmt','parser.py',296),
  ('stmt_nest -> stmt stmt_nest','stmt_nest',2,'p_stmt_nest','parser.py',301),
  ('stmt_nest -> empty','stmt_nest',1,'p_stmt_nest','parser.py',302),
  ('decl_stmt -> var_decl SEMICOLON','decl_stmt',2,'p_decl_stmt','parser.py',310),
  ('decl_stmt -> const_decl SEMICOLON','decl_stmt',2,'p_decl_stmt','parser.py',311),
  ('exp_stmt -> expression_opt SEMICOLON','exp_stmt',2,'p_exp_stmt','parser.py',316),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',321),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',322),
  ('if_stmt -> IF LPARENT expression RPARENT stmt if_stmt_else_opt','if_stmt',6,'p_if_stmt','parser.py',330),
  ('if_stmt_else_opt -> ELSE stmt','if_stmt_else_opt',2,'p_if_stmt_else_opt','parser.py',335),
  ('if_stmt_else_opt -> empty','if_stmt_else_opt',1,'p_if_stmt_else_opt','parser.py',336),
  ('while_stmt -> WHILE LPARENT expression RPARENT stmt','while_stmt',5,'p_while_stmt','parser.py',344),
  ('for_stmt -> FOR LPARENT for_init_stmt expression_opt SEMICOLON expression_opt RPARENT stmt','for_stmt',8,'p_for_stmt','parser.py',349),
  ('for_init_stmt -> exp_stmt','for_init_stmt',1,'p_for_init_stmt','parser.py',354),
  ('for_init_stmt -> decl_stmt','for_init_stmt',1,'p_for_init_stmt','parser.py',355),
  ('break_stmt -> BREAK SEMICOLON','break_stmt',2,'p_break_stmt','parser.py',360),
  ('continue_stmt -> CONTINUE SEMICOLON','continue_stmt',2,'p_continue_stmt','parser.py',365),
  ('return_stmt -> RETURN expression_opt SEMICOLON','return_stmt',3,'p_return_stmt','parser.py',370),
  ('expression -> assign_exp','expression',1,'p_expression','parser.py',375),
  ('expression -> binary_exp','expression',1,'p_expression','parser.py',376),
  ('expression -> unary_exp','expression',1,'p_expression','parser.py',377),
  ('expression -> postfix_exp','expression',1,'p_expression','parser.py',378),
  ('assign_exp -> expression ASSIGN expression','assign_exp',3,'p_assign_exp','parser.py',383),
  ('binary_exp -> expression PLUS expression','binary_exp',3,'p_binary_exp','parser.py',389),
  ('binary_exp -> expression MINUS expression','binary_exp',3,'p_binary_exp','parser.py',390),
  ('binary_exp -> expression MUL expression','binary_exp',3,'p_binary_exp','parser.py',391),
  ('binary_exp -> expression DIV expression','binary_exp',3,'p_binary_exp','parser.py',392),
  ('binary_exp -> expression AND expression','binary_exp',3,'p_binary_exp','parser.py',393),
  ('binary_exp -> expression OR expression','binary_exp',3,'p_binary_exp','parser.py',394),
  ('binary_exp -> expression XOR expression','binary_exp',3,'p_binary_exp','parser.py',395),
  ('binary_exp -> expression MOD expression','binary_exp',3,'p_binary_exp','parser.py',396),
  ('binary_exp -> expression LSHIFT expression','binary_exp',3,'p_binary_exp','parser.py',397),
  ('binary_exp -> expression RSHIFT expression','binary_exp',3,'p_binary_exp','parser.py',398),
  ('binary_exp -> expression LOGICOR expression','binary_exp',3,'p_binary_exp','parser.py',399),
  ('binary_exp -> expression LOGICAND expression','binary_exp',3,'p_binary_exp','parser.py',400),
  ('binary_exp -> expression NEQ expression','binary_exp',3,'p_binary_exp','parser.py',401),
  ('binary_exp -> expression EQ expression','binary_exp',3,'p_binary_exp','parser.py',402),
  ('binary_exp -> expression LEQ expression','binary_exp',3,'p_binary_exp','parser.py',403),
  ('binary_exp -> expression LSS expression','binary_exp',3,'p_binary_exp','parser.py',404),
  ('binary_exp -> expression GEQ expression','binary_exp',3,'p_binary_exp','parser.py',405),
  ('binary_exp -> expression GRE expression','binary_exp',3,'p_binary_exp','parser.py',406),
  ('unary_exp -> unary_op expression','unary_exp',2,'p_unary_exp','parser.py',411),
  ('unary_op -> NOT','unary_op',1,'p_unary_op','parser.py',416),
  ('unary_op -> LOGICNOT','unary_op',1,'p_unary_op','parser.py',417),
  ('unary_op -> PLUS','unary_op',1,'p_unary_op','parser.py',418),
  ('unary_op -> MINUS','unary_op',1,'p_unary_op','parser.py',419),
  ('postfix_exp -> primary_exp','postfix_exp',1,'p_postfix_exp','parser.py',425),
  ('postfix_exp -> array_index_exp','postfix_exp',1,'p_postfix_exp','parser.py',426),
  ('postfix_exp -> member_exp','postfix_exp',1,'p_postfix_exp','parser.py',427),
  ('postfix_exp -> refer_exp','postfix_exp',1,'p_postfix_exp','parser.py',428),
  ('postfix_exp -> cast_exp','postfix_exp',1,'p_postfix_exp','parser.py',429),
  ('postfix_exp -> call_func_exp','postfix_exp',1,'p_postfix_exp','parser.py',430),
  ('postfix_exp -> io_exp','postfix_exp',1,'p_postfix_exp','parser.py',431),
  ('postfix_exp -> lambda_exp','postfix_exp',1,'p_postfix_exp','parser.py',432),
  ('primary_exp -> INTCON','primary_exp',1,'p_primary_exp','parser.py',437),
  ('primary_exp -> FLOATCON','primary_exp',1,'p_primary_exp','parser.py',438),
  ('primary_exp -> ID','primary_exp',1,'p_primary_exp','parser.py',439),
  ('primary_exp -> LPARENT expression RPARENT','primary_exp',3,'p_primary_exp','parser.py',440),
  ('array_index_exp -> postfix_exp LBRACK expression RBRACK','array_index_exp',4,'p_array_index_exp','parser.py',453),
  ('member_exp -> postfix_exp DOT ID','member_exp',3,'p_member_exp','parser.py',458),
  ('refer_exp -> AND LPARENT expression RPARENT','refer_exp',4,'p_refer_exp','parser.py',463),
  ('cast_exp -> LPARENT type_spec RPARENT expression','cast_exp',4,'p_cast_exp','parser.py',468),
  ('call_func_exp -> postfix_exp generic_spec_list_opt LPARENT func_real_param_list_opt RPARENT','call_func_exp',5,'p_func_call_exp','parser.py',473),
  ('func_real_param_list_opt -> expression func_real_param_nest','func_real_param_list_opt',2,'p_func_real_param_list_opt','parser.py',478),
  ('func_real_param_list_opt -> empty','func_real_param_list_opt',1,'p_func_real_param_list_opt','parser.py',479),
  ('func_real_param_nest -> expression func_real_param_nest','func_real_param_nest',2,'p_func_real_param_nest','parser.py',487),
  ('func_real_param_nest -> empty','func_real_param_nest',1,'p_func_real_param_nest','parser.py',488),
  ('lambda_exp -> FUNC func_type block_stmt','lambda_exp',3,'p_lambda_exp','parser.py',496),
  ('io_exp -> SCAN LSS type_spec GRE LPARENT ID RPARENT','io_exp',7,'p_io_expr','parser.py',501),
  ('io_exp -> PRINT LSS type_spec GRE LPARENT expression RPARENT','io_exp',7,'p_io_expr','parser.py',502),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',510),
]
